--- rustc-1.48.0-src.orig/compiler/rustc_target/src/spec/mod.rs
+++ rustc-1.48.0-src/compiler/rustc_target/src/spec/mod.rs
@@ -510,6 +510,7 @@
     ("powerpc64le-unknown-linux-gnu", powerpc64le_unknown_linux_gnu),
     ("powerpc64le-unknown-linux-musl", powerpc64le_unknown_linux_musl),
     ("s390x-unknown-linux-gnu", s390x_unknown_linux_gnu),
+    ("s390x-unknown-linux-musl", s390x_unknown_linux_musl),
     ("sparc-unknown-linux-gnu", sparc_unknown_linux_gnu),
     ("sparc64-unknown-linux-gnu", sparc64_unknown_linux_gnu),
     ("arm-unknown-linux-gnueabi", arm_unknown_linux_gnueabi),
--- /dev/null
+++ rustc-1.48.0-src/compiler/rustc_target/src/spec/s390x_unknown_linux_musl.rs
@@ -0,0 +1,28 @@
+use crate::spec::{LinkerFlavor, Target};
+
+pub fn target() -> Target {
+    let mut base = super::linux_base::opts();
+    // z10 is the oldest CPU supported by LLVM
+    base.cpu = "z10".to_string();
+    // FIXME: The data_layout string below and the ABI implementation in
+    // cabi_s390x.rs are for now hard-coded to assume the no-vector ABI.
+    // Pass the -vector feature string to LLVM to respect this assumption.
+    base.features = "-vector".to_string();
+    base.max_atomic_width = Some(64);
+    base.min_global_align = Some(16);
+    base.static_position_independent_executables = true;
+    base.endian = "big".to_string();
+    base.c_int_width = "32".to_string();
+    base.os = "linux".to_string();
+    base.env = "musl".to_string();
+    base.vendor = "unknown".to_string();
+    base.linker_flavor = LinkerFlavor::Gcc;
+
+    Target {
+        llvm_target: "s390x-unknown-linux-musl".to_string(),
+        data_layout: "E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-a:8:16-n32:64".to_string(),
+        arch: "s390x".to_string(),
+        pointer_width: 64,
+        options: base,
+    }
+}
