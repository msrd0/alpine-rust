---
kind: pipeline
name: check

steps:
  - name: restore-cache
    image: meltwater/drone-cache:v1
    pull: always
    settings:
      backend: "filesystem"
      restore: true
      cache_key: '{{ .Repo.Name }}_slim_{{ checksum "Cargo.lock" }}_{{ arch }}_{{ os }}'
      archive_format: "gzip"
      mount:
        - "target"
    volumes:
      - name: cache
        path: /tmp/cache
  
  - name: check
    image: rust:slim
    pull: always
    environment:
      CARGO_HOME: target/cargo
      RUST_BACKTRACE: 1
    commands:
      - apt-get update -y
      - apt-get install -y libssl-dev pkgconf
      - cargo -V
      - cargo check
  
  - name: rebuild-cache
    image: meltwater/drone-cache:v1
    pull: always
    settings:
      backend: "filesystem"
      rebuild: true
      cache_key: '{{ .Repo.Name }}_slim_{{ checksum "Cargo.lock" }}_{{ arch }}_{{ os }}'
      archive_format: "gzip"
      mount:
        - "target"
    volumes:
      - name: cache
        path: /tmp/cache
  
  - name: notify
    image: drillster/drone-email
    pull: always
    settings:
      host: smtp.migadu.com
      username: noreply@drone.msrd0.eu
      from: noreply@drone.msrd0.eu
      password:
        from_secret: SMTP_PASSWORD
    when:
      status:
        - failure

volumes:
  - name: cache
    host:
      path: /var/lib/cache

---
kind: pipeline
name: rustfmt

steps:
  - name: rustfmt
    image: iamsauravsharma/rust-fmt:nightly-alpine
    pull: always
    commands:
      - cargo fmt -- -V
      - cargo fmt -- --check -l
  
  - name: notify
    image: drillster/drone-email
    pull: always
    settings:
      host: smtp.migadu.com
      username: noreply@drone.msrd0.eu
      from: noreply@drone.msrd0.eu
      password:
        from_secret: SMTP_PASSWORD
    when:
      status:
        - failure

---
kind: pipeline
name: build

depends_on:
  - check
trigger:
  branch:
    - master
  event:
    - cron
    - custom
    - push
  status:
    - success

steps:
  - name: restore-cache
    image: meltwater/drone-cache:v1
    pull: always
    settings:
      backend: "filesystem"
      restore: true
      cache_key: '{{ .Repo.Name }}_alpine_{{ checksum "Cargo.lock" }}_{{ arch }}_{{ os }}'
      archive_format: "gzip"
      mount:
        - "target"
    volumes:
      - name: cache
        path: /tmp/cache
  
  - name: build
    image: alpine:3.12
    pull: always
    environment:
      CARGO_HOME: target/cargo
    commands:
      - apk add --no-cache cargo libressl-dev pkgconf rust
      - cargo -V
      - cargo build
  
  - name: secrets
    image: busybox
    pull: always
    environment:
      ABUILD_PUBKEY:
        from_secret: ABUILD_PUBKEY
      ABUILD_PRIVKEY:
        from_secret: ABUILD_PRIVKEY
    commands:
      - echo "$$ABUILD_PUBKEY" >alpine@msrd0.de-5fc3c0b2.rsa.pub
      - echo "$$ABUILD_PRIVKEY" >alpine@msrd0.de-5fc3c0b2.rsa
  
  - name: run
    image: docker
    pull: always
    environment:
      GITHUB_TOKEN:
        from_secret: GITHUB_TOKEN
      RUST_LOG: info
    commands:
      - apk add --no-cache git libgcc libressl
      - docker -v
      - ./target/debug/alpine-rust
      - docker ps -a
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmp
        path: /tmp
  
  - name: rebuild-cache
    image: meltwater/drone-cache:v1
    pull: always
    settings:
      backend: "filesystem"
      rebuild: true
      cache_key: '{{ .Repo.Name }}_alpine_{{ checksum "Cargo.lock" }}_{{ arch }}_{{ os }}'
      archive_format: "gzip"
      mount:
        - "target"
    volumes:
      - name: cache
        path: /tmp/cache
  
  - name: notify
    image: drillster/drone-email
    pull: always
    settings:
      host: smtp.migadu.com
      username: noreply@drone.msrd0.eu
      from: noreply@drone.msrd0.eu
      password:
        from_secret: SMTP_PASSWORD
      # only send me an email because I don't want contributors to be email if a cron job failed
      recipients:
        - "alpine@msrd0.de"
      recipients_only: true
    when:
      status:
        - failure

environment:
  RUST_BACKTRACE: 1

services:
  - name: docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run
      - name: tmp
        path: /tmp

volumes:
  - name: cache
    host:
      path: /var/lib/cache
  - name: dockersock
    temp: {}
  - name: tmp
    temp: {}

...
