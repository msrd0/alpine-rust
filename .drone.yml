---
kind: pipeline
name: check

steps:
  - name: restore-cache
    image: meltwater/drone-cache:v1
    pull: always
    settings:
      backend: "filesystem"
      restore: true
      cache_key: '{{ .Repo.Name }}_debug_{{ checksum "Cargo.lock" }}_{{ arch }}_{{ os }}'
      archive_format: "gzip"
      mount:
        - "target"
    volumes:
      - name: cache
        path: /tmp/cache
  
  - name: check
    image: ghcr.io/msrd0/alpine-rust
    pull: always
    commands:
      - apk add --no-cache libgit2-dev libssh2-dev libressl-dev pkgconf
      - cargo -V
      - cargo check
  
  - name: rebuild-cache
    image: meltwater/drone-cache:v1
    pull: always
    settings:
      backend: "filesystem"
      rebuild: true
      cache_key: '{{ .Repo.Name }}_debug_{{ checksum "Cargo.lock" }}_{{ arch }}_{{ os }}'
      archive_format: "gzip"
      mount:
        - "target"
    volumes:
      - name: cache
        path: /tmp/cache
  
  - name: notify
    image: drillster/drone-email
    pull: always
    settings:
      host: smtp.migadu.com
      username: noreply@drone.msrd0.eu
      from: noreply@drone.msrd0.eu
      password:
        from_secret: SMTP_PASSWORD
    when:
      status:
        - failure

volumes:
  - name: cache
    host:
      path: /var/lib/cache

environment:
  CARGO_HOME: target/cargo
  LIBGIT2_SYS_USE_PKG_CONFIG: 1
  LIBSSH2_SYS_USE_PKG_CONFIG: 1
  RUST_BACKTRACE: 1

---
kind: pipeline
name: rustfmt

steps:
  - name: rustfmt
    image: alpine:3.13
    pull: always
    commands:
      - apk add rustup
      - rustup-init -qy --default-host x86_64-unknown-linux-musl --default-toolchain none </dev/null
      - source $CARGO_HOME/env
      - rustup toolchain install nightly --profile minimal --component rustfmt
      - cargo -V
      - cargo fmt -- -V
      - cargo fmt -- --check -l
  
  - name: notify
    image: drillster/drone-email
    pull: always
    settings:
      host: smtp.migadu.com
      username: noreply@drone.msrd0.eu
      from: noreply@drone.msrd0.eu
      password:
        from_secret: SMTP_PASSWORD
    when:
      status:
        - failure

environment:
  CARGO_HOME: target/cargo

---
kind: pipeline
name: build

depends_on:
  - check
trigger:
  branch:
    - master
  event:
    - cron
    - custom
    - push
  status:
    - success

steps:
  - name: ipv6-test
    image: busybox
    pull: always
    commands:
      - ping6 -c 5 drone.msrd0.eu
  
  - name: restore-build-cache
    image: meltwater/drone-cache:v1
    pull: always
    settings:
      backend: "filesystem"
      restore: true
      cache_key: '{{ .Repo.Name }}_release_{{ checksum "Cargo.lock" }}_{{ arch }}_{{ os }}'
      archive_format: "gzip"
      mount:
        - "target"
    volumes:
      - name: cache
        path: /tmp/cache
  
  - name: build
    image: ghcr.io/msrd0/alpine-rust
    pull: always
    commands:
      - apk add --no-cache libgit2-dev libssh2-dev libressl-dev pkgconf
      - cargo -V
      - cargo build --release
  
  - name: rebuild-build-cache
    image: meltwater/drone-cache:v1
    pull: always
    settings:
      backend: "filesystem"
      rebuild: true
      cache_key: '{{ .Repo.Name }}_release_{{ checksum "Cargo.lock" }}_{{ arch }}_{{ os }}'
      archive_format: "gzip"
      mount:
        - "target"
    volumes:
      - name: cache
        path: /tmp/cache
  
  - name: secrets
    image: busybox
    pull: always
    environment:
      ABUILD_PUBKEY:
        from_secret: ABUILD_PUBKEY
      ABUILD_PRIVKEY:
        from_secret: ABUILD_PRIVKEY
    commands:
      - echo "$$ABUILD_PUBKEY" >alpine@msrd0.de-5fc3c0b2.rsa.pub
      - echo "$$ABUILD_PRIVKEY" >alpine@msrd0.de-5fc3c0b2.rsa
  
  - name: restore-repo-cache
    image: meltwater/drone-cache:v1
    pull: always
    settings:
      backend: "filesystem"
      restore: true
      cache_key: '{{ .Repo.Name }}_cache'
      archive_format: "gzip"
      mount:
        - "cache"
    volumes:
      - name: cache
        path: /tmp/cache
  
  - name: run
    image: alpine
    pull: always
    environment:
      GITHUB_TOKEN:
        from_secret: GITHUB_TOKEN
      MINIO_ACCESS_KEY:
        from_secret: MINIO_ACCESS_KEY
      MINIO_SECRET_KEY:
        from_secret: MINIO_SECRET_KEY
      RUST_LOG: info
      UPCLOUD_PASSWORD:
        from_secret: UPCLOUD_PASSWORD
    commands:
      - apk add --no-cache ca-certificates git libgcc libgit2 libssh2 libressl
      - mkdir -p target/repo
      - ./target/release/alpine-rust -c -u -d -m -p -r cache/repo --cache cache/cache -v --ignore beta
  
  - name: rebuild-repo-cache
    image: meltwater/drone-cache:v1
    pull: always
    settings:
      backend: "filesystem"
      rebuild: true
      cache_key: '{{ .Repo.Name }}_cache'
      archive_format: "gzip"
      mount:
        - "cache"
    volumes:
      - name: cache
        path: /tmp/cache
  
  - name: notify
    image: drillster/drone-email
    pull: always
    settings:
      host: smtp.migadu.com
      username: noreply@drone.msrd0.eu
      from: noreply@drone.msrd0.eu
      password:
        from_secret: SMTP_PASSWORD
      # only send me an email because I don't want contributors to be email if a cron job failed
      recipients:
        - "alpine@msrd0.de"
      recipients_only: true
    when:
      status:
        - failure

environment:
  CARGO_HOME: target/cargo
  LIBGIT2_SYS_USE_PKG_CONFIG: 1
  LIBSSH2_SYS_USE_PKG_CONFIG: 1
  RUST_BACKTRACE: 1

volumes:
  - name: cache
    host:
      path: /var/lib/cache

...
